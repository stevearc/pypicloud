[app:main]
use = egg:pypicloud

pyramid.reload_templates = {{ reload_templates }}
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en

pypi.default_read =
    {% if env == 'prod' or env == 'docker' -%}
      authenticated
    {%- else -%}
      everyone
    {%- endif %}
{% if env != 'prod' -%}
pypi.default_write =
    authenticated
{%- endif %}

pypi.storage = {{ storage }}
{% if storage == 'file' -%}
storage.dir = {{ workdir }}/packages
{%- elif storage == 'azure-blob' -%}
storage.storage_account_name = {{ storage_account_name }}
storage.storage_account_key = {{ storage_account_key }}
storage.storage_container_name = {{ storage_container_name }}
{%- elif storage == 'gcs' -%}
storage.bucket = {{ gcs_bucket }}
{% if bucket_region -%}
storage.region_name = {{ bucket_region }}
{%- endif %}
{%- else -%}
storage.aws_access_key_id = {{ access_key }}
storage.aws_secret_access_key = {{ secret_key }}
storage.bucket = {{ s3_bucket }}
{% if bucket_region -%}
storage.region_name = {{ bucket_region }}
{%- endif %}
{%- endif %}

db.url = sqlite:///{{ workdir }}/db.sqlite

auth.admins =
  {{ admin }}

user.{{ admin }} = {{ password }}

# For beaker
session.encrypt_key = {{ encrypt_key }}
session.validate_key = {{ validate_key }}
session.secure = {{ session_secure }}
session.invalidate_corrupt = true

###
# wsgi server configuration
###

{% if wsgi == 'waitress' -%}
[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 6543
{%- elif wsgi == 'uwsgi' -%}
[uwsgi]
paste = config:%p
paste-logger = %p
master = true
processes = 20
reload-mercy = 15
worker-reload-mercy = 15
max-requests = 1000
enable-threads = true
http = 0.0.0.0:8080
{%- if env == 'docker' %}
uid = pypicloud
gid = pypicloud
{%- else %}
{% if venv is defined -%}virtualenv = {{ venv }}{%- endif %}
{%- endif %}
{%- endif %}

###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
###

{% if env == 'prod' -%}

[loggers]
keys = root

[handlers]
keys = file

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = file

[handler_file]
class = handlers.RotatingFileHandler
args = ('/var/log/pypicloud.log', 'a', 1000000, 5)
level = NOTSET
formatter = generic

{%- else -%}

[loggers]
keys = root, botocore, pypicloud

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_pypicloud]
level = DEBUG
qualname = pypicloud
handlers =

[logger_botocore]
level = WARN
qualname = botocore
handlers =

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

{%- endif %}

[formatter_generic]
format = %(levelname)s %(asctime)s [%(name)s] %(message)s
